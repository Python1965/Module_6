# Дополнительное практическое задание по модулю: "Наследование классов."
# ***************************************************************************************
# Задание "Они все так похожи":
# 2D? 3D? Даже 4D?.... Настолько глубоко мы заходить конечно же не будем, 4D подождёт, но вот
# с двумерными и трёхмерными фигурами можем поэкспериментировать.
# Вы когда-нибудь задумывались как устроены графические библиотеки для языков программирования?
# Безусловно, там выполняются огромные расчёты при помощи вашей видеокарты, но... Что лежит в основе
# удобного использования таких объектов?
#
# По названию задачи можно понять, что все геометрические фигуры обладают схожими свойствами,
# такими как: длины сторон, цвет и др.
#
# Давайте попробуем реализовать простейшие классы для некоторых таких фигур и при этом применить
# наследование (в будущем, изучая сторонние библиотеки, вы будете замечать схожие классы,
# уже написанные кем-то ранее):
#
# Общее ТЗ:
# Реализовать классы Figure(родительский), Circle, Triangle и Cube, объекты которых будут обладать
# методами изменения размеров, цвета и т.д.
# Многие атрибуты и методы должны быть инкапсулированны и для них должны быть написаны интерфейсы
# взаимодействия (методы) - геттеры и сеттеры.
#
# Подробное ТЗ:
#
# Атрибуты класса Figure:
#   - sides_count = 0
#
# Каждый объект класса Figure должен обладать следующими атрибутами:
#
# Атрибуты(инкапсулированные):
#   - __sides(список сторон (целые числа)),
#   = __color(список цветов в формате RGB)
# Атрибуты(публичные):
#   - filled(закрашенный, bool)
#
# И методами:
#   - get_color, возвращает список RGB цветов.
#   - __is_valid_color - служебный, принимает параметры r, g, b, который проверяет корректность
#     переданных значений перед установкой нового цвета. Корректным цвет:
#     все значения r, g и b - целые числа в диапазоне от 0 до 255 (включительно).
#   - set_color принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие
#     значения, предварительно проверив их на корректность. Если введены некорректные данные,
#     то цвет остаётся прежним.
#   - __is_valid_sides - служебный, принимает неограниченное кол-во сторон, возвращает True если
#     все стороны целые положительные числа и кол-во новых сторон совпадает с текущим, False - во всех
#     остальных случаях.
#   - get_sides должен возвращать значение я атрибута __sides.
#   - __len__ должен возвращать периметр фигуры.
#   - set_sides(self, *new_sides) должен принимать новые стороны, если их количество не равно sides_count,
#     то не изменять, в противном случае - менять.
#
# Атрибуты класса Circle:
#   - sides_count = 1
#
# Каждый объект класса Circle должен обладать следующими атрибутами и методами:
#   - Все атрибуты и методы класса Figure
#   - __radius, рассчитать исходя из длины окружности (одной единственной стороны).
#   - get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).
#
# Атрибуты класса Triangle:
#   - sides_count = 3
#
# Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
#   - Все атрибуты и методы класса Figure
#   - get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)
#
# Атрибуты класса Cube:
#   - sides_count = 12
# Каждый объект класса Cube должен обладать следующими атрибутами и методами:
#   - Все атрибуты и методы класса Figure.
#   - Переопределить __sides сделав список из 12 одинаковы сторон (передаётся 1 сторона)
#   - Метод get_volume, возвращает объём куба.
#
# ВАЖНО!
# При создании объектов делайте проверку на количество переданных сторон, если сторон не ровно
#   sides_count, то создать массив с единичными сторонами и в том кол-ве, которое требует фигура.
#
# Пример 1: Circle((200, 200, 100), 10, 15, 6), т.к. сторона у круга всего 1,
#           то его стороны будут - [1]
# Пример 2: Triangle((200, 200, 100), 10, 6), т.к. сторон у треугольника 3,
#           то его стороны будут - [1, 1, 1]
# Пример 3: Cube((200, 200, 100), 9), т.к. сторон(рёбер) у куба - 12,
#           то его стороны будут - [9, 9, 9, ....., 9] (12)
# Пример 4: Cube((200, 200, 100), 9, 12), т.к. сторон (рёбер) у куба - 12,
#           то его стороны будут - [1, 1, 1, ....., 1]
#
#****************************************************************************************
from math import pi as PI

class Figure:
    sides_count = 0

    def __init__(self, color, side):
        self.__sides = [0]           # список сторон (целые числа)
        self.__color = [0, 0, 0]           # (список цветов формате RGB)
        self.filled = None          # (закрашенный, bool)

    def __len__(self):              # должен возвращать периметр фигуры.
        if self.sides_count == 0:
            return 0
        else:
            sum = 0
            for item in self.__sides:
                sum += item
            return sum

    def __is_valid_color(self, color):  # принимает параметры r, g, b, который проверяет корректность
                                        # переданных значений перед установкой нового цвета. Корректным цвет:
                                        # все значения r, g и b - целые числа в диапазоне от 0 до 255 (включительно).

        for item in color:
            if not isinstance(item, int) or item < 1 or item > 255:
                return False

            return True

    def set_color(self, *new_color): # принимает параметры r, g, b - числа и изменяет атрибут __color на
                                    # соответствующие значения, предварительно проверив их на корректность.
                                    # Если введены некорректные данные, то цвет остаётся прежним.

        if self.__is_valid_color(new_color):
            self.__color[0] = new_color[0]
            self.__color[1] = new_color[1]
            self.__color[2] = new_color[2]

    def get_color(self):
        return self.__color

    def __is_valid_sides(self, new_sides):  # принимает неограниченное кол-во сторон,
                                            # возвращает True, если все стороны целые положительные числа
                                            # и кол-во новых сторон совпадает с текущим, False - во всех
                                            # остальных случаях.

        if self.sides_count != len(new_sides):
            return False

        for item in new_sides:
            if not isinstance(item , int):
                return False

        return True

    def set_sides(self, *new_sides):  # должен принимать новые стороны, если их количество не равно
                                      # sides_count, то не изменять, в противном случае - менять.

        if self.__is_valid_sides(new_sides):
            self.__sides = list(new_sides)

    def get_sides(self):        # должен возвращать значение атрибута __sides
        return self.__sides


class Circle(Figure):
    sides_count = 1

    def __init__(self, color, *side):  # (Цвет, стороны)
        super().__init__(color, side)
        self.__radius = self.get_sides()[0] / (2 * PI)      # рассчитать исходя из длины окружности (одной единственной стороны).

    def set_sides(self, new_sides):
        super().set_sides(new_sides)
        self.__radius = self.get_sides()[0] / (2 * PI)

    def get_square(self):       # `возвращает площадь круга (можно рассчитать как через длину,
                                # так и через радиус).

            return self.__radius ** 2 * PI

class Triangle(Figure):
    sides_count = 3

    def __init__(self, color, *side):  # (Цвет, стороны)
        super().__init__(color, side)

    def get_square(self):       # возвращает площадь треугольника.(можно рассчитать по формуле Герона)
        pass

class Cube(Figure):
    sides_count = 12

    def __init__(self, color, *side):  # (Цвет, стороны)
        super().__init__()

        self.__color = list(color)
        self.__sides = list(side)

    def __init__(self):
        # super()   # Переопределить __sides сделав список из 12 одинаковых сторон (передаётся 1 сторона)
        pass

    def get_volume(self):  #возвращает объём куба.
        pass


def start():
    circle1 = Circle((200, 200, 100), 10)  # (Цвет, стороны)
    # cube1 = Cube((222, 35, 130), 6)
    #
    # # Проверка на изменение цветов:
    circle1.set_color(55, 66, 77)  # Изменится
    print(circle1.get_color())
    # cube1.set_color(300, 70, 15)  # Не изменится
    # print(cube1.get_color())
    #
    # # Проверка на изменение сторон:
    # cube1.set_sides(5, 3, 12, 4, 5)  # Не изменится
    # print(cube1.get_sides())
    circle1.set_sides(15)  # Изменится
    print(circle1.get_sides())
    #
    # # Проверка периметра (круга), это и есть длина:
    print(len(circle1))
    print(circle1.get_square())

    #
    # # Проверка объёма (куба):
    # print(cube1.get_volume())

if __name__ == '__main__':
    start()